{
  "name": "AI Chatbot Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot-message",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "chatbot-message"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node['Webhook Trigger'].json['headers']['x-hasura-webhook-secret']}}",
              "operation": "equal",
              "value2": "={{$env.N8N_WEBHOOK_SECRET}}"
            }
          ]
        }
      },
      "id": "validate-webhook",
      "name": "Validate Webhook",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{$env.NHOST_GRAPHQL_ENDPOINT}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-hasura-admin-secret",
              "value": "={{$env.NHOST_ADMIN_SECRET}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query GetChatOwnership($chat_id: uuid!, $user_id: uuid!) { chats(where: {id: {_eq: $chat_id}, user_id: {_eq: $user_id}}) { id user_id } }"
            },
            {
              "name": "variables",
              "value": "={\"chat_id\": \"{{$node['Webhook Trigger'].json['input']['chat_id']}}\", \"user_id\": \"{{$node['Webhook Trigger'].json['session_variables']['x-hasura-user-id']}}\"}}"
            }
          ]
        },
        "options": {}
      },
      "id": "verify-chat-ownership",
      "name": "Verify Chat Ownership",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$node['Verify Chat Ownership'].json['data']['chats'].length}}",
              "operation": "equal",
              "value2": 1
            }
          ]
        }
      },
      "id": "check-ownership",
      "name": "Check Ownership",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.OPENROUTER_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "openai/gpt-3.5-turbo"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are a helpful AI assistant. Provide concise and helpful responses.\"}, {\"role\": \"user\", \"content\": \"{{$node['Webhook Trigger'].json['input']['message']}}\"}]"
            },
            {
              "name": "max_tokens",
              "value": 500
            },
            {
              "name": "temperature",
              "value": 0.7
            }
          ]
        },
        "options": {}
      },
      "id": "call-openrouter-api",
      "name": "Call OpenRouter API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 100]
    },
    {
      "parameters": {
        "url": "={{$env.NHOST_GRAPHQL_ENDPOINT}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-hasura-admin-secret",
              "value": "={{$env.NHOST_ADMIN_SECRET}}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "mutation InsertMessage($chat_id: uuid!, $content: String!, $is_bot: Boolean!) { insert_messages_one(object: {chat_id: $chat_id, content: $content, is_bot: $is_bot}) { id content created_at } }"
            },
            {
              "name": "variables",
              "value": "={\"chat_id\": \"{{$node['Webhook Trigger'].json['input']['chat_id']}}\", \"content\": \"{{$node['Call OpenRouter API'].json['choices'][0]['message']['content']}}\", \"is_bot\": true}}"
            }
          ]
        },
        "options": {}
      },
      "id": "save-bot-response",
      "name": "Save Bot Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"success\": true, \"message\": \"Response generated successfully\", \"response_id\": \"{{$node['Save Bot Response'].json['data']['insert_messages_one']['id']}}\"}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"message\": \"Unauthorized: Invalid webhook secret\"}",
        "responseCode": 401,
        "options": {}
      },
      "id": "unauthorized-response",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"message\": \"Forbidden: Chat access denied\"}",
        "responseCode": 403,
        "options": {}
      },
      "id": "forbidden-response",
      "name": "Forbidden Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Webhook": {
      "main": [
        [
          {
            "node": "Verify Chat Ownership",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Chat Ownership": {
      "main": [
        [
          {
            "node": "Check Ownership",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Ownership": {
      "main": [
        [
          {
            "node": "Call OpenRouter API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Forbidden Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenRouter API": {
      "main": [
        [
          {
            "node": "Save Bot Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Bot Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}
